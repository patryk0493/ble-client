{"version":3,"sources":["components/App/index.tsx","consts.ts","index.tsx"],"names":["server","device","AIR_CONDITION_CHARACTERSTICS","uuid","type","enc","TextDecoder","useState","undefined","NH3","setNH3","CO","setCO","NO2","setNO2","C3H8","setC3H8","C4H10","setC4H10","CH4","setCH4","H2","setH2","C2H5OH","setC2H5OH","O2","setO2","UPTIME","setUPTIME","status","setStatus","handleDisconnectBtnClick","a","notification","info","message","description","disconnect","handleCharacteristicValueChanged","event","target","value","decodedValue","decode","handleConnectBtnClick","navigator","bluetooth","requestDevice","filters","name","optionalServices","console","error","gatt","deviceDisconnectEventHandler","removeEventListener","addEventListener","connect","getPrimaryServices","services","createCharacteristicsNotification","characteristic","airConditionCharacteristics","find","c","startNotifications","JSON","stringify","forEach","service","log","getCharacteristics","success","className","style","margin","padding","backgroundColor","align","justify","span","textAlign","sm","href","md","lg","xl","display","alignItems","icon","CheckCircleOutlined","color","onClick","danger","DisconnectOutlined","orientation","plain","title","FieldTimeOutlined","CharacteristicView","xs","xxl","prefix","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.b2dac83f.chunk.js","sourcesContent":["import { Button, Col, Divider, notification, Row, Statistic, Tag } from 'antd';\r\nimport Layout from 'antd/lib/layout';\r\nimport { Content, Footer } from 'antd/lib/layout/layout';\r\nimport React, { useState } from \"react\";\r\nimport { CheckCircleOutlined, DisconnectOutlined, ExperimentOutlined, FieldTimeOutlined, LikeOutlined, RightCircleOutlined } from '@ant-design/icons';\r\nimport { AIR_CONDITION_CHARACTERSTICS, Characteristic, SERVICE_UUID_3, SERVICE_UUID, SERVICE_UUID_2 } from \"../../consts\";\r\n\r\ntype CharacteristicValueType = string | number | undefined;\r\ninterface CharacteristicViewProps {\r\n  title: string;\r\n  value: string | number | undefined;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nconst enc = new TextDecoder(\"utf-8\");\r\n\r\nlet server: BluetoothRemoteGATTServer;\r\nlet device: BluetoothDevice | undefined;\r\n\r\nexport default () => {\r\n\r\n  const [NH3, setNH3] = useState<CharacteristicValueType>(undefined);\r\n  const [CO, setCO] = useState<CharacteristicValueType>(undefined);\r\n  const [NO2, setNO2] = useState<CharacteristicValueType>(undefined);\r\n  const [C3H8, setC3H8] = useState<CharacteristicValueType>(undefined);\r\n  const [C4H10, setC4H10] = useState<CharacteristicValueType>(undefined);\r\n  const [CH4, setCH4] = useState<CharacteristicValueType>(undefined);\r\n  const [H2, setH2] = useState<CharacteristicValueType>(undefined);\r\n  const [C2H5OH, setC2H5OH] = useState<CharacteristicValueType>(undefined);\r\n  const [O2, setO2] = useState<CharacteristicValueType>(undefined);\r\n  const [UPTIME, setUPTIME] = useState<CharacteristicValueType>(undefined);\r\n  const [status, setStatus] = useState<'disconnected' | 'disconnecting' | 'connected' | 'error'>('disconnected');\r\n\r\n  const handleDisconnectBtnClick = async () => {\r\n    if (status === 'connected' && server) {\r\n      setStatus('disconnecting');\r\n      notification.info({\r\n        message: `Disconnecting...`,\r\n        description: '',\r\n      });\r\n      server.disconnect();\r\n    }\r\n  }\r\n\r\n  const handleCharacteristicValueChanged = (event: Event) => ({ type }: Characteristic) => {\r\n    const { target }: any = event;\r\n    if (!event || !target) {\r\n      return;\r\n    }\r\n    const { value } = target;\r\n    const decodedValue = enc.decode(value);\r\n    switch (type) {\r\n      case 'NH3':\r\n        setNH3(decodedValue);\r\n        break;\r\n      case 'CO':\r\n        setCO(decodedValue);\r\n        break;\r\n      case 'NO2':\r\n        setNO2(decodedValue);\r\n        break;\r\n      case 'C3H8':\r\n        setC3H8(decodedValue);\r\n        break;\r\n      case 'C4H10':\r\n        setC4H10(decodedValue);\r\n        break;\r\n      case 'CH4':\r\n        setCH4(decodedValue);\r\n        break;\r\n      case 'H2':\r\n        setH2(decodedValue);\r\n        break;\r\n      case 'C2H5OH':\r\n        setC2H5OH(decodedValue);\r\n        break;\r\n      case 'O2':\r\n        setO2(decodedValue);\r\n        break;\r\n      case 'UPTIME':\r\n        setUPTIME(decodedValue);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleConnectBtnClick = async () => {\r\n    try {\r\n      device = await navigator.bluetooth.requestDevice({\r\n        filters: [\r\n          {\r\n            // services: [SERVICE_UUID, SERVICE_UUID_2],\r\n            name: \"Air condition GATT server\"\r\n          }\r\n        ],\r\n        optionalServices: [SERVICE_UUID, SERVICE_UUID_2, SERVICE_UUID_3]\r\n      });\r\n    } catch (error) {\r\n      notification.info({\r\n        message: `Connection aborted`,\r\n        description: `${error}`\r\n      });\r\n      setStatus('error');\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (!device || !device.gatt) {\r\n      return;\r\n    }\r\n\r\n    const deviceDisconnectEventHandler = (event: Event) => {\r\n      notification.info({\r\n        message: `Device disconnected`,\r\n      });\r\n      setStatus('disconnected');\r\n      if (device) {\r\n        device.removeEventListener('gattserverdisconnected', deviceDisconnectEventHandler);\r\n      }\r\n    }\r\n\r\n    device.addEventListener('gattserverdisconnected', deviceDisconnectEventHandler);\r\n\r\n    server = await device.gatt.connect();\r\n\r\n    const services = await server.getPrimaryServices();\r\n\r\n    const createCharacteristicsNotification = async (characteristic: BluetoothRemoteGATTCharacteristic) => {\r\n      try {\r\n        const airConditionCharacteristics = AIR_CONDITION_CHARACTERSTICS.find(c => c.uuid === characteristic.uuid);\r\n        if (!airConditionCharacteristics) {\r\n          notification.error({\r\n            message: `Characteristic with UUID: ${characteristic.uuid} not found!`,\r\n            description: '',\r\n          });\r\n          return;\r\n        }\r\n        const c = await characteristic.startNotifications();\r\n        c.addEventListener(\"characteristicvaluechanged\", event => handleCharacteristicValueChanged(event)(airConditionCharacteristics));\r\n      } catch (error) {\r\n        notification.error({\r\n          message: `Error`,\r\n          description: JSON.stringify(error),\r\n        });\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    services.forEach(async service => {\r\n      console.log(service);\r\n\r\n      const serviceCharacteristics = await service.getCharacteristics();\r\n\r\n      serviceCharacteristics.forEach(async characteristic => createCharacteristicsNotification(characteristic));\r\n    });\r\n\r\n    notification.success({\r\n      message: `Connected`,\r\n      description: '',\r\n    });\r\n    setStatus('connected');\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"layout\">\r\n        <Content style={{\r\n          margin: '20px 20px',\r\n          padding: '15px 15px',\r\n          backgroundColor: 'white'\r\n        }}>\r\n          <Row align='middle' justify='center'>\r\n            <Col span={24}>\r\n              <h1 style={{ textAlign: 'center' }}>\r\n                Welcome to the <b>Air Condition</b> app\r\n              </h1>\r\n            </Col>\r\n            <Col sm={24}>\r\n              <p style={{ textAlign: 'center' }}>\r\n                Enable the chrome flag{\" \"}\r\n                <a href=\"chrome://flags/#enable-experimental-web-platform-features\">\r\n                  #enable-experimental-web-platform-features\r\n                </a>{\" \"}\r\n                <br />\r\n                and open in a new window.\r\n              </p>\r\n            </Col>\r\n            <Col sm={24} md={18} lg={12} xl={8}>\r\n              <Row justify='space-between'>\r\n                <Col style={{ display: 'flex', alignItems: 'center' }}>\r\n                  <div>\r\n                    <p style={{ margin: '0em 1em 0 0', display: 'inline-block', padding: 0 }}>\r\n                      Status:\r\n                    </p>\r\n                    <Tag icon={<CheckCircleOutlined />} color={status === 'connected' ? \"success\" : 'blue'}>\r\n                      {status === 'connected' ? `Connected` : `Disconnected`}\r\n                    </Tag>\r\n                  </div>\r\n                </Col>\r\n                <Col>\r\n                  {status !== 'connected' &&\r\n                    <Button type='primary' onClick={handleConnectBtnClick}>\r\n                      Connect\r\n                    </Button>\r\n                  }\r\n                  {status === 'connected' &&\r\n                    <Button danger onClick={handleDisconnectBtnClick} icon={<DisconnectOutlined />}>\r\n                      Disconnect\r\n                    </Button>\r\n                  }\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Divider orientation=\"left\" plain>\r\n            Sensors values:\r\n          </Divider>\r\n          <Row>\r\n            <CharacteristicView title='NH3' value={NH3} />\r\n            <CharacteristicView title='CO' value={CO} />\r\n            <CharacteristicView title='NO2' value={NO2} />\r\n            <CharacteristicView title='C3H8' value={C3H8} />\r\n            <CharacteristicView title='C4H10' value={C4H10} />\r\n            <CharacteristicView title='CH4' value={CH4} />\r\n            <CharacteristicView title='H2' value={H2} />\r\n            <CharacteristicView title='C2H5OH' value={C2H5OH} />\r\n            <CharacteristicView title='O2' value={O2} />\r\n            <CharacteristicView title='UPTIME' value={UPTIME} icon={<FieldTimeOutlined />} />\r\n          </Row>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>Marcin Jońca, 2020</Footer>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CharacteristicView: React.FC<CharacteristicViewProps> = ({ title, value = 'unknown', icon = <></> }) => {\r\n  return (\r\n    <Col xs={24} sm={12} md={8} xl={6} xxl={4}>\r\n      <div style={{ padding: '10px' }}>\r\n        <Statistic title={title} value={value} prefix={icon} />\r\n      </div>\r\n    </Col>\r\n  )\r\n}\r\n","export const SERVICE_UUID = \"4fafc201-1fb5-459e-8fcc-c5c9c331914b\";\nexport const SERVICE_UUID_2 = \"df36dcba-c5e4-499f-b0a9-ec9d1ad5c283\";\nexport const SERVICE_UUID_3 = \"72d3039f-d086-475c-9454-9dfe8333599b\";\n\nexport interface Characteristic {\n    uuid: string;\n    type: 'NH3' | 'CO' | 'NO2' | 'C3H8' | 'C4H10' | 'CH4' | 'H2' | 'C2H5OH' | 'O2' | 'UPTIME';\n}\n\nexport const AIR_CONDITION_CHARACTERSTICS: Characteristic[] = [\n    { uuid: 'beb5483e-36e1-4688-b7f5-ea07361b26a8', type: 'NH3', },\n    { uuid: 'a9c871ea-408b-11eb-b378-0242ac130002', type: 'CO', },\n    { uuid: '32030236-416e-11eb-b378-0242ac130002', type: 'NO2', },\n    { uuid: '378dfe5e-416e-11eb-b378-0242ac130002', type: 'C3H8', },\n    { uuid: '3b78a87a-416e-11eb-b378-0242ac130002', type: 'C4H10', },\n    { uuid: '42161564-416e-11eb-b378-0242ac130002', type: 'CH4', },\n    { uuid: '45cb679a-416e-11eb-b378-0242ac130002', type: 'H2', },\n    { uuid: '49c043a2-416e-11eb-b378-0242ac130002', type: 'C2H5OH', },\n    { uuid: '4d55b4c0-416e-11eb-b378-0242ac130002', type: 'O2', },\n    { uuid: '2df89ce0-720b-4ebb-a0d0-522ba6344971', type: 'UPTIME', },\n];\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport 'antd/dist/antd.css';\n\nimport App from \"./components/App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}